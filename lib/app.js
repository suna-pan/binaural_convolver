// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var audio, audio_pause, audio_play, audio_update_time, count, file, file_open, playing, src_wav, volume, waveSize;
    file = null;
    src_wav = null;
    playing = false;
    count = 0;
    waveSize = 0;
    volume = 1.0;
    audio = new Audio();
    audio_pause = function() {
      audio.pause();
      playing = false;
      return $('#audio_play').children('img').attr('src', 'icon_play.png');
    };
    audio_play = function() {
      audio.play();
      playing = true;
      return $('#audio_play').children('img').attr('src', 'icon_pause.png');
    };
    audio_update_time = function(reset) {
      var cm, cs, mm, ms;
      if (reset) {
        $('#audio_time').text('00:00/00:00');
        return;
      }
      cm = Math.floor(audio.currentTime / 60);
      cs = Math.floor(audio.currentTime) % 60;
      mm = Math.floor(audio.duration / 60);
      ms = Math.floor(audio.duration) % 60;
      if (isNaN(mm)) {
        mm = 0;
      }
      if (isNaN(ms)) {
        ms = 0;
      }
      return $('#audio_time').text(('0' + cm).slice(-2) + ':' + ('0' + cs).slice(-2) + '/' + ('0' + mm).slice(-2) + ':' + ('0' + ms).slice(-2));
    };
    file_open = function() {
      var wav_load_fail, wav_load_sccuess;
      src_wav = new window.WavFile(file);
      wav_load_sccuess = function(header) {
        var filie;
        if (header.fmtSamplingRate !== 44100 || header.fmtBitPerSample !== 16) {
          alert('This format is not supported.(Support : 16bit 44100Hz)');
          filie = null;
        }
        waveSize = Math.ceil(header.fmtWaveSize / 2 / header.fmtCh / 512);
        return $('#selected_filename').text(file.name);
      };
      wav_load_fail = function(code) {
        if (code === 1) {
          alert('Your Web Browser is not supported.');
        }
        if (code === 2) {
          return alert('This file is not wav file.');
        }
      };
      return src_wav.loadHeader(wav_load_sccuess, wav_load_fail);
    };
    $('#drop_zone').on('drop', function(_e) {
      var e;
      e = _e.originalEvent;
      e.stopPropagation();
      e.preventDefault();
      file = e.dataTransfer.files[0];
      return file_open();
    });
    $('#drop_zone').on('dragover', function(_e) {
      var e;
      e = _e.originalEvent;
      e.stopPropagation();
      e.preventDefault();
      return e.dataTransfer.dropEffect = 'copy';
    });
    $('#file_selecter').change(function() {
      file = this.files[0];
      if (file === null) {
        alert('Please choose a file to process.');
        return;
      }
      return file_open();
    });
    $('#exec_button').click(function() {
      var angle, hrtfFileName;
      if (file === null) {
        alert('Please choose a file to process.');
        return;
      }
      $('#exec_button').prop('disabled', true);
      audio_pause();
      $('#audio_play').prop('disabled', true);
      $('#audio_stop').prop('disabled', true);
      $('#audio_dl').prop('disabled', true);
      $('#audio_position').slider({
        max: 0,
        value: 0
      });
      audio_update_time(true);
      $('#audio_controller').css({
        opacity: '0.3'
      });
      $('#audio_dl').click(function() {
        return false;
      });
      window.thAzimuth;
      hrtfFileName = '';
      if (thElev === 90) {
        hrtfFileName = '90e000a.json';
      } else {
        angle = 360 - thAzimuth;
        if (angle === 360) {
          angle = 0;
        }
        hrtfFileName = thElev + 'e' + ('00' + angle).slice(-3) + 'a.json';
      }
      return $.getJSON('/json/' + hrtfFileName, function(data) {
        var hrtfL, hrtfR, i, j, loadWavFail, loadWavFirst, oldBufL, oldBufR, resultWav;
        hrtfL = [];
        hrtfR = [];
        for (i = j = 0; j < 1024; i = ++j) {
          hrtfL.push(new Complex(data.hL[i].re, data.hL[i].im));
          hrtfR.push(new Complex(data.hR[i].re, data.hR[i].im));
        }
        loadWavFail = function() {
          alert('failed to load waves.');
          $('#exec_button').prop('disabled', false);
          $('#selected_filename').text('Choose file to process');
          return file = null;
        };
        oldBufL = [];
        oldBufR = [];
        resultWav = '';
        loadWavFirst = function(last, result, refSize) {
          var k, len, loadWavLoop;
          if (last) {
            alert('This file is too short.');
            $('#exec_button').prop('disabled', false);
            $('#selected_filename').text('Choose file to process');
            file = null;
            return;
          }
          for (k = 0, len = result.length; k < len; k++) {
            i = result[k];
            oldBufL.push(new Complex(i[0].re, i[0].im));
            oldBufR.push(new Complex(i[1].re, i[1].im));
          }
          $('#exec_button').attr('value', '');
          count = 0;
          loadWavLoop = function(last, result, refSize) {
            var bufL, bufR, convol, fileName, l, len1, m, n, o, progress, wav;
            count++;
            progress = Math.floor(count / waveSize * 100);
            $('#exec_button').css({
              background: "linear-gradient(to right, #505050 0%, #505050 " + progress + "%, #202020 " + progress + "%, #202020 100%)"
            });
            bufL = [];
            bufR = [];
            for (i = l = 0; l < 512; i = ++l) {
              bufL.push(new Complex(oldBufL[i].re, oldBufL[i].im));
              bufR.push(new Complex(oldBufR[i].re, oldBufR[i].im));
            }
            oldBufL = [];
            oldBufR = [];
            for (m = 0, len1 = result.length; m < len1; m++) {
              i = result[m];
              bufL.push(new Complex(i[0].re, i[0].im));
              bufR.push(new Complex(i[1].re, i[1].im));
              oldBufL.push(new Complex(i[0].re, i[0].im));
              oldBufR.push(new Complex(i[1].re, i[1].im));
            }
            if (last) {
              while (bufL.length !== 1024) {
                bufL.push(new Complex(0, 0));
                bufR.push(new Complex(0, 0));
                oldBufL.push(new Complex(0, 0));
                oldBufR.push(new Complex(0, 0));
              }
            }
            convol = function() {
              var bl, br, n, o, results;
              fft1024(bufL);
              fft1024(bufR);
              for (i = n = 0; n < 1024; i = ++n) {
                bufL[i].multiply(hrtfL[i]);
                bufR[i].multiply(hrtfR[i]);
              }
              ifft1024(bufL);
              ifft1024(bufR);
              results = [];
              for (i = o = 512; o < 1024; i = ++o) {
                bl = Math.round(bufL[i].re);
                br = Math.round(bufR[i].re);
                resultWav += String.fromCharCode(bl & 0xff, (bl >> 8) & 0xff);
                results.push(resultWav += String.fromCharCode(br & 0xff, (br >> 8) & 0xff));
              }
              return results;
            };
            convol();
            if (last) {
              bufL = [];
              bufR = [];
              for (i = n = 0; n < 512; i = ++n) {
                bufL.push(new Complex(oldBufL[i].re, oldBufL[i].im));
                bufR.push(new Complex(oldBufR[i].re, oldBufR[i].im));
              }
              for (i = o = 0; o < 512; i = ++o) {
                bufL.push(new Complex(0, 0));
                bufR.push(new Complex(0, 0));
              }
              convol();
              wav = btoa(src_wav.genWavHeader(resultWav.length) + resultWav);
              audio.src = 'data:audio/wav;base64,' + wav;
              fileName = 'bn_' + file.name;
              $('#audio_dl').unbind('click');
              $('#audio_dl').attr({
                download: fileName,
                href: 'data:audio/wav;base64,' + wav
              });
              $('#exec_button').attr('value', 'Start');
              $('#exec_button').css({
                background: ''
              });
              $('#exec_button').prop('disabled', false);
              $('#audio_play').prop('disabled', false);
              $('#audio_stop').prop('disabled', false);
              $('#audio_dl').prop('disabled', false);
              return $('#audio_controller').css({
                opacity: ''
              });
            } else {
              return src_wav.next512(loadWavLoop, loadWavFail);
            }
          };
          return src_wav.next512(loadWavLoop, loadWavFail);
        };
        return src_wav.next512(loadWavFirst, loadWavFail);
      }).fail(function() {
        alert('Failed to download HRTF.');
        $('#exec_button').prop('disabled', false);
        $('#selected_filename').text('Choose file to process');
        return file = null;
      });
    });
    $('#audio_play').click(function(e) {
      if (playing) {
        return audio_pause();
      } else {
        return audio_play();
      }
    });
    $('#audio_stop').click(function(e) {
      audio_pause();
      return audio.currentTime = 0;
    });
    $('#audio_position').slider({
      value: 0,
      min: 0,
      max: 0,
      step: 1,
      range: 'min',
      stop: function(event, ui) {
        return audio.currentTime = ui.value / 1000;
      }
    });
    $('#audio_volume').slider({
      value: 1000,
      min: 0,
      max: 1000,
      step: 1,
      range: 'min',
      slide: function(event, ui) {
        audio.volume = ui.value / 1000;
        return volume = audio.volume;
      }
    });
    audio.addEventListener('durationchange', function() {
      return $('#audio_position').slider({
        max: Math.ceil(audio.duration * 1000)
      });
    }, false);
    audio.addEventListener('canplaythrough', function() {
      return audio_update_time(false);
    }, false);
    audio.addEventListener('timeupdate', function() {
      $('#audio_position').slider({
        value: Math.ceil(audio.currentTime * 1000)
      });
      return audio_update_time(false);
    }, false);
    audio.addEventListener('ended', function() {
      audio_pause();
      return audio.currentTime = 0;
    }, false);
    $('#audio_controller').css({
      opacity: '0.3'
    });
    $('#audio_play').prop('disabled', true);
    $('#audio_stop').prop('disabled', true);
    $('#audio_dl').prop('disabled', true);
    return $('#audio_position').slider({
      max: 0,
      value: 0
    });
  });

}).call(this);
